name: Test

on: 
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

# Set minimal permissions for security
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: npm-ci
      run: npm ci

    - name: Allow unprivileged user namespace (ubuntu)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

    - name: Setup Chrome browser (Ubuntu)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      uses: browser-actions/setup-chrome@v1

    - name: Setup Chrome browser (macOS)  
      if: ${{ startsWith(matrix.os, 'macos') }}
      uses: browser-actions/setup-chrome@v1

    - name: Setup Chrome browser (Windows)
      if: ${{ startsWith(matrix.os, 'windows') }}
      uses: browser-actions/setup-chrome@v1

    - name: Install dependencies
      run: npm run install:all

    # install bruin cli for linux, mac and windows
    - name: Install Bruin CLI
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -LsSf https://raw.githubusercontent.com/bruin-data/bruin/refs/heads/main/install.sh | sh
        else
          curl -LsSL https://raw.githubusercontent.com/bruin-data/bruin/refs/heads/main/install.sh | sh
        fi
      shell: bash

    - name: Compile
      run: npm run compile

    - name: Build Webview
      run: npm run build:webview

    - name: Run extension tests
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          xvfb-run -a npm run test
        else
          npm run test
        fi
      shell: bash

    - name: Run webview tests
      run: npm run test:webview

    - name: Run basic integration tests
      continue-on-error: true
      run: |
        echo "Running connections and ingestr tests..."
        echo "Note: This step continues even if tests fail to prevent random CI failures from blocking builds"
        if [ "${{ runner.os }}" = "Linux" ]; then
          export CHROME_BIN=$(which google-chrome || which chromium-browser || which chromium)
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-basic-$$"
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm run selenium:run-tests:connections
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm run selenium:run-tests:ingestr
        elif [ "${{ runner.os }}" = "macOS" ]; then
          if [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
            export CHROME_BIN="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          fi
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-basic-$$"
          npm run selenium:run-tests:connections
          npm run selenium:run-tests:ingestr
        else
          export CHROME_USER_DATA_DIR="C:\\temp\\chrome-user-data-basic-$$"
          npm run selenium:run-tests:connections
          npm run selenium:run-tests:ingestr
        fi
      shell: bash

    - name: Run webview integration tests
      continue-on-error: true
      run: |
        echo "Running webview tests..."
        echo "Note: This step continues even if tests fail to prevent random CI failures from blocking builds"
        if [ "${{ runner.os }}" = "Linux" ]; then
          export CHROME_BIN=$(which google-chrome || which chromium-browser || which chromium)
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-webview-$$"
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm run selenium:run-tests:webview
        elif [ "${{ runner.os }}" = "macOS" ]; then
          if [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
            export CHROME_BIN="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          fi
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-webview-$$"
          npm run selenium:run-tests:webview
        else
          export CHROME_USER_DATA_DIR="C:\\temp\\chrome-user-data-webview-$$"
          npm run selenium:run-tests:webview
        fi
      shell: bash

    - name: Run lineage integration tests
      continue-on-error: true
      run: |
        echo "Running lineage tests..."
        echo "Note: This step continues even if tests fail to prevent random CI failures from blocking builds"
        if [ "${{ runner.os }}" = "Linux" ]; then
          export CHROME_BIN=$(which google-chrome || which chromium-browser || which chromium)
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-lineage-$$"
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm run selenium:run-tests:lineage
        elif [ "${{ runner.os }}" = "macOS" ]; then
          if [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
            export CHROME_BIN="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          fi
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-lineage-$$"
          npm run selenium:run-tests:lineage
        else
          export CHROME_USER_DATA_DIR="C:\\temp\\chrome-user-data-lineage-$$"
          npm run selenium:run-tests:lineage
        fi
      shell: bash

    - name: Run query preview integration tests
      continue-on-error: true
      run: |
        echo "Running query preview tests..."
        echo "Note: This step continues even if tests fail to prevent random CI failures from blocking builds"
        if [ "${{ runner.os }}" = "Linux" ]; then
          export CHROME_BIN=$(which google-chrome || which chromium-browser || which chromium)
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-query-preview-$$"
          xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm run selenium:run-tests:query-preview
        elif [ "${{ runner.os }}" = "macOS" ]; then
          if [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
            export CHROME_BIN="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          fi
          export CHROME_USER_DATA_DIR="/tmp/chrome-user-data-query-preview-$$"
          npm run selenium:run-tests:query-preview
        else
          export CHROME_USER_DATA_DIR="C:\\temp\\chrome-user-data-query-preview-$$"
          npm run selenium:run-tests:query-preview
        fi
      shell: bash

    - name: Store UI test logs
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: logs-${{ matrix.os }}
        path: test-resources/settings/logs/*

    - name: Store UI Test screenshots
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: screenshots-${{ matrix.os }}
        path: test-resources/screenshots/*.png