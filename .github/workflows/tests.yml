name: Test

on: 
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

# Set minimal permissions for security
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: npm-ci
      run: npm ci

    - name: Allow unprivileged user namespace (ubuntu)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

    - name: Setup Chrome browser (Ubuntu)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      uses: browser-actions/setup-chrome@v1

    - name: Setup Chrome browser (macOS)  
      if: ${{ startsWith(matrix.os, 'macos') }}
      uses: browser-actions/setup-chrome@v1

    - name: Setup Chrome browser (Windows)
      if: ${{ startsWith(matrix.os, 'windows') }}
      uses: browser-actions/setup-chrome@v1

    - name: Install dependencies
      run: npm run install:all

    # install bruin cli for linux, mac and windows
    - name: Install Bruin CLI
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          curl -LsSf https://raw.githubusercontent.com/bruin-data/bruin/refs/heads/main/install.sh | sh
        else
          curl -LsSL https://raw.githubusercontent.com/bruin-data/bruin/refs/heads/main/install.sh | sh
        fi
      shell: bash

    - name: Compile
      run: npm run compile

    - name: Build Webview
      run: npm run build:webview

    - name: Run extension tests
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          xvfb-run -a npm run test
        else
          npm run test
        fi
      shell: bash

    - name: Run webview tests
      run: npm run test:webview

    # Prepare workspace for Bruin extension activation
    - name: Setup test workspace
      run: |
        mkdir -p test-workspace
        cd test-workspace
        
        # Create .bruin.yml for connections management
        cat > .bruin.yml << 'EOF'
        default_environment: default
        
        environments:
          default:
            connections:
              google_cloud_platform:
                - name: test-gcp-connection
                  project_id: test-project-123
                  location: US
              duckdb:
                - name: test-duckdb-connection
                  path: /tmp/test.duckdb
          dev:
            connections:
              postgres:
                - name: test-postgres-connection
                  host: localhost
                  port: 5432
                  username: test_user
                  password: test_pass
                  database: test_db
          test_env:
            connections: {}
        EOF
        
        # Create assets directory and test files
        mkdir -p assets
        
        # Create example.sql for webview tests
        cat > assets/example.sql << 'EOF'
        /* @bruin

        name: myschema.example
        type: bq.sql

        materialization:
           type: table

        description: |
          # Example table
          This asset is an example table with some quality checks to help you get started.

        columns:
          - name: id
            type: integer
            description: "Just a number"
            primary_key: true
            checks:
                - name: not_null
                - name: positive

          - name: country
            type: varchar
            description: "the country"
            primary_key: true
            checks:
                - name: not_null

          - name: name
            type: varchar
            update_on_merge: true
            description: "Just a name"
            checks:
                - name: unique
                - name: not_null

        @bruin */

        SELECT 1 as id, 'Spain' as country , 'Juan' as name
        union all
        SELECT 2 as id, 'Germany' as country , 'Markus' as name
        union all
        SELECT 3 as id, 'France' as country , 'Antoine' as name
        union all
        SELECT 4 as id, 'Poland' as country , 'Franciszek' as name
        EOF
        
        # Create test-ingestr.asset.yml for ingestr tests  
        cat > assets/test-ingestr.asset.yml << 'EOF'
        name: "test_ingestr_source"
        type: "ingestr"
        
        source_connection: "source_postgres"
        source_table: "public.users"
        
        destination:
          connection: "snowflake_conn"
          table: "raw.ingestr_users"
        
        columns:
          - name: id
            type: integer
            primary_key: true
            checks:
              - unique
              - not_null
          - name: name
            type: varchar
            checks:
              - not_null
          - name: email
            type: varchar
            checks:
              - unique
              - not_null
        EOF
        
        echo "Created test workspace with .bruin.yml and asset files"
      shell: bash

    - name: Install extension dependencies
      run: |
        # Ensure redhat.vscode-yaml is available (required by Bruin extension)
        echo "Extension dependencies will be installed during VS Code setup"
      shell: bash

    - name: Run integration tests
      run: |
        echo "Running integration tests with proper workspace setup..."
        
        # Set Chrome-related environment variables
        if [ "${{ runner.os }}" = "Linux" ]; then
          export CHROME_BIN=$(which google-chrome || which chromium-browser || which chromium)
          echo "Using Chrome at: $CHROME_BIN"
          # Set workspace path for extension activation
          export TEST_WORKSPACE_PATH="$PWD/test-workspace"
          # Increase timeout for CI environment (slower than local)
          export TEST_TIMEOUT_MULTIPLIER="3"
          if xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm run selenium:run-tests; then
            echo "✅ Integration tests passed successfully!"
          else
            echo "❌ Integration tests failed"
            echo "Checking logs and screenshots for debugging..."
            # List any generated screenshots
            if [ -d "test-resources/screenshots" ]; then
              echo "Available screenshots:"
              find test-resources/screenshots -name "*.png" -type f | head -10
            fi
            # Show recent log entries
            if [ -d "test-resources/settings/logs" ]; then
              echo "Recent log entries:"
              find test-resources/settings/logs -name "*.log" -type f -exec tail -20 {} \; 2>/dev/null || true
            fi
          fi
        elif [ "${{ runner.os }}" = "macOS" ]; then
          # Try different Chrome locations on macOS
          if [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
            export CHROME_BIN="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          elif [ -f "/Applications/Chromium.app/Contents/MacOS/Chromium" ]; then
            export CHROME_BIN="/Applications/Chromium.app/Contents/MacOS/Chromium"
          fi
          echo "Using Chrome at: $CHROME_BIN"
          export TEST_WORKSPACE_PATH="$PWD/test-workspace"
          export TEST_TIMEOUT_MULTIPLIER="3"
          if npm run selenium:run-tests; then
            echo "✅ Integration tests passed successfully!"
          else
            echo "❌ Integration tests failed"
            echo "Checking for debugging information..."
          fi
        else
          # Windows - let extension tester handle Chrome detection
          set TEST_WORKSPACE_PATH=%CD%\test-workspace
          set TEST_TIMEOUT_MULTIPLIER=3
          if npm run selenium:run-tests; then
            echo "✅ Integration tests passed successfully!"
          else
            echo "❌ Integration tests failed"
            echo "Checking for debugging information..."
          fi
        fi
      shell: bash
      continue-on-error: false

    - name: Store UI test logs
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: logs-${{ matrix.os }}
        path: test-resources/settings/logs/*

    - name: Store UI Test screenshots
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: screenshots-${{ matrix.os }}
        path: test-resources/screenshots/*.png