{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AssetsSchema",
  "$id": "https://github.com/bruin-data/bruin/pkg/pipeline/assets-schema",
  "$ref": "#/$defs/AssetsSchema",
  "$defs": {
    "AssetsSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the asset"
        },
        "uri": {
          "$ref": "#/$defs/uri",
          "description": "The URI of the asset"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the asset"
        },
        "type": {
          "type": "string",
          "enum": [
            "python",
            "sf.sql",
            "sf.sensor.query",
            "bq.sql",
            "bq.sensor.table",
            "bq.sensor.query",
            "duckdb.sensor.query",
            "pg.sensor.query",
            "rs.sensor.query",
            "ms.sensor.query",
            "databricks.sensor.query",
            "synapse.sensor.query",
            "clickhouse.sensor.query",
            "empty",
            "pg.sql",
            "rs.sql",
            "ms.sql",
            "synapse.sql",
            "ingestr",
            "duckdb.seed",
            "emr_serverless.spark",
            "emr_serverless.pyspark",
            "athena.seed",
            "bq.seed",
            "clickhouse.seed",
            "databricks.seed",
            "ms.seed",
            "pg.seed",
            "rs.seed",
            "sf.seed",
            "synapse.seed",
            "looker",
            "powerbi",
            "qliksense",
            "qlikview",
            "sisense",
            "domo",
            "quicksight",
            "oracle.source",
            "oracle.sql"
          ],
          "description": "The type of the asset"
        },
        "run": {
          "type": "string",
          "description": "The file to run for this asset"
        },
        "depends": {
          "$ref": "#/$defs/depends",
          "description": "Dependencies for this asset"
        },
        "meta":{
          "$ref": "#/$defs/meta",
          "description": "Meta information for this asset"
        },
        "domains": {
          "$ref": "#/$defs/domains",
          "description": "Domains for this asset"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "description": "Optional source, used when inferring from connection is not enough"
            },
            "source_connection": {
              "type": "string",
              "description": "The connection used for the source"
            },
            "source_table": {
              "type": "string",
              "description": "The source table"
            },
            "destination": {
              "type": "string",
              "enum": [
                "athena",
                "bigquery",
                "snowflake",
                "postgres",
                "redshift",
                "mssql",
                "databricks",
                "synapse",
                "duckdb",
                "clickhouse",
                "gcs",
                "mongo_atlas"
              ],
              "description": "The destination system",
              "additionalProperties": true
            },
            "location": {
              "type": "string",
              "description": "The location of the asset"
            },
            "query": {
              "type": "string",
              "description": "The query for this asset"
            },
            "incremental_strategy": {
              "type": "string",
              "description": "The incremental strategy used for loading data into the destination",
              "enum": [
                "delete+insert",
                "merge",
                "replace",
                "append",
                "scd2"
              ]
            },
            "incremental_key": {
              "type": "string",
              "description": "The incremental key for this asset, must be an existing column in the source table"
            },
            "loader_file_format": {
              "type": "string",
              "description": "The file format to use when loading data",
              "enum": [
                "parquet",
                "jsonl",
                "csv",
                "insert_values"
              ]
            },
            "loader_file_size": {
              "type": "integer",
              "description": "The file size to be used by the loader to split the data into multiple files. This can be set independent of the page size, since page size is used for fetching the data from the sources whereas this is used for the processing/loading part."
            },
            "page_size": {
              "type": "integer",
              "description": "The page size to be used when fetching data from SQL sources"
            },
            "sql_backend": {
              "type": "string",
              "description": "The SQL backend to use when fetching data from SQL sources",
              "enum": [
                "sqlalchemy",
                "pyarrow",
                "connectorx"
              ]
            },
            "schema_naming": {
              "type": "string",
              "description": "The naming convention to use when moving the tables from source to destination. The default behavior is explained here: https://dlthub.com/docs/general-usage/schema#naming-convention",
              "enum": [
                "default",
                "direct"
              ]
            }
          },
          "additionalProperties": true,
          "description": "Parameters for this asset"
        },
        "connections": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Connections for this asset"
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/secretMapping"
          },
          "description": "Secrets for this asset"
        },
        "connection": {
          "type": "string",
          "description": "The connection used by this asset"
        },
        "image": {
          "type": "string",
          "description": "The image used for this asset"
        },
        "instance": {
          "type": "string",
          "description": "The instance type for this asset"
        },
        "interval_modifiers": {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "description": "Shift start time"
            },
            "end": {
              "type": "string",
              "description": "Shift end time"
            }
          },
          "description": "Interval modifiers for this asset"
        },
        "materialization": {
          "$ref": "#/$defs/materialization",
          "description": "Materialization details for this asset"
        },
        "owner": {
          "type": "string",
          "description": "The owner of this asset"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/column"
          },
          "description": "Columns for this asset"
        },
        "custom_checks": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/customCheck"
          },
          "description": "Custom checks for this asset"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags for this asset"
        },
        "snowflake": {
          "$ref": "#/$defs/snowflake",
          "description": "Snowflake configuration for this asset"
        }
      },
      "additionalProperties": false
    },
    "depends": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "type": "string",
            "description": "A simple asset dependency represented by its name"
          },
          {
            "type": "object",
            "properties": {
              "uri": {
                "$ref": "#/$defs/uri"
              }
            },
            "required": [
              "uri"
            ],
            "description": "A URI dependency"
          }
        ]
      }
    },
    "domains": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Domains for this asset"
    },
    "meta": {
      "type": "object",
      "properties": {
        "business_owner": {
          "type": "string",
          "description": "The business owner of the asset"
        },
        "data_steward": {
          "type": "string",
          "description": "The data steward of the asset"
        },
        "refresh_frequency": {
          "type": "string",
          "description": "The refresh frequency of the asset"
        },
        "retention_policy": {
          "type": "string",
          "description": "The retention policy of the asset"
        }
      }
    },
    "materialization": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "table",
            "view",
            "time_interval"
          ],
          "description": "Materialization type"
        },
        "strategy": {
          "$ref": "#/$defs/strategy",
          "description": "Materialization strategy, applicable if type is table"
        },
        "partition_by": {
          "type": "string",
          "description": "Partitioning key"
        },
        "cluster_by": {
          "$ref": "#/$defs/clusterBy",
          "description": "Clustering keys"
        },
        "incremental_key": {
          "type": "string",
          "description": "Incremental key, applicable if strategy is delete+insert"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "table"
              }
            }
          },
          "then": {
            "allOf": [
              {
                "if": {
                  "properties": {
                    "strategy": {
                      "const": "delete+insert"
                    }
                  },
                  "required": [
                    "strategy"
                  ]
                },
                "then": {
                  "required": [
                    "incremental_key"
                  ]
                }
              }
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "view"
              }
            }
          },
          "then": {
            "not": {
              "required": [
                "strategy"
              ]
            }
          }
        }
      ]
    },
    "strategy": {
      "type": "string",
      "enum": [
        "create+replace",
        "delete+insert",
        "append",
        "merge",
        "ddl",
        "truncate+insert",
        "scd2_by_column",
        "scd2_by_time"
      ],
      "description": "Materialization strategy"
    },
    "uri": {
      "type": "string",
      "description": "A URI representing an external dependency"
    },
    "clusterBy": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "column": {
      "type": "object",
      "properties": {
        "extends": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "checks": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/columnCheck"
          }
        },
        "primary_key": {
          "type": "boolean"
        },
        "update_on_merge": {
          "type": "boolean"
        }
      }
    },
    "columnCheck": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "$ref": "#/$defs/columnCheckValue"
        },
        "blocking": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "columnCheckValue": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "IntArray": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "Int": {
              "type": "integer"
            },
            "Float": {
              "type": "number"
            },
            "StringArray": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "String": {
              "type": "string"
            },
            "Bool": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "number" },
              { "type": "boolean" }
            ]
          }
        },
        {
          "type": "string"
        },
        {
          "type": "integer"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        }
      ]
    },
    "customCheck": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "value": {
          "type": "integer"
        },
        "blocking": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "secretMapping": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "inject_as": {
          "type": "string"
        }
      },
      "required": [
        "key"      
      ]
    },
    "snowflake": {
      "type": "object",
      "properties": {
        "warehouse": {
          "type": "string"
        }
      },
      "required": [
        "warehouse"
      ]
    }
  }
}